{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "CRUD of users in CookinEA",
    "description": "CRUD User",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3001",
  "basePath": "/api",
  "tags": [
    {
      "name": "Users",
      "description": "Basic CRUD of users"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "409": {
            "description": "Fields has to be unique"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "500": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "User is deleted"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Database Error"
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Fields has to be unique"
          },
          "500": {
            "description": "Database Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "required": [
        "name",
        "surname",
        "username",
        "email",
        "password",
        "interests",
        "gender",
        "phone",
        "aboutme",
        "birthday"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "uniqueItems": true
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string",
          "uniqueItems": true
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string",
            "uniqueItems": true
          }
        },
        "gender": {
          "type": "string"
        },
        "phone": {
          "type": "number"
        },
        "aboutme": {
          "type": "string"
        },
        "birthday": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    }
  }
}
